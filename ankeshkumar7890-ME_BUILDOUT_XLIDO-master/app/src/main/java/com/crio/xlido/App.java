/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xlido;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import com.crio.xlido.commands.AddQuestionCommand;
import com.crio.xlido.commands.CreateEventCommand;
import com.crio.xlido.commands.CreateUserCommand;
import com.crio.xlido.commands.DeleteEventCommand;
import com.crio.xlido.commands.DeleteQuestionCommand;
import com.crio.xlido.commands.ListQuestionCommand;
import com.crio.xlido.commands.ReplyQuestionCommand;
import com.crio.xlido.commands.UpVoteQuestionCommand;
import com.crio.xlido.repositories.EventRepository;
import com.crio.xlido.repositories.QuestionRepository;
import com.crio.xlido.repositories.UserRepository;
import com.crio.xlido.services.EventService;
import com.crio.xlido.services.QuestionService;
import com.crio.xlido.services.UserService;

public class App {
    private final UserRepository userRepository = new UserRepository();
    private final UserService userService = new UserService(userRepository);
    private final CreateUserCommand createUserCommand = new CreateUserCommand(userService);

    private final EventRepository eventRepository = new EventRepository();
    private final EventService eventService = new EventService(eventRepository, userRepository);
    private final CreateEventCommand createEventCommand =  new CreateEventCommand(eventService);
    private final DeleteEventCommand deleteEventCommand = new DeleteEventCommand(eventService);

    private final QuestionRepository questionRepository = new QuestionRepository();
    private final QuestionService questionService = new QuestionService(questionRepository,userRepository,eventRepository);
    private final AddQuestionCommand addQuestionCommand = new AddQuestionCommand(questionService);
    private final DeleteQuestionCommand deleteQuestionCommand = new DeleteQuestionCommand(questionService);
    private final UpVoteQuestionCommand upVoteQuestionCommand = new UpVoteQuestionCommand(questionService);
    private final ReplyQuestionCommand replyQuestionCommand = new ReplyQuestionCommand(questionService); 
    private final ListQuestionCommand listQuestionCommand = new ListQuestionCommand(questionService);

   
    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1){
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                // Execute the commands
                new App().run(file_commands);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        }        

        // OR
        // Test your code by adding commands in this list
        List<String> inplace_commands = new LinkedList<>(){
            {
            }
        };

        new App().run(inplace_commands);
 
    }
    public void run(List<String> commands){

        Iterator<String> it = commands.iterator();
        while(it.hasNext()){
            String line = it.next();
                if(line == null){
                    break;
                }
                List<String> tokens = Arrays.asList(line.split(","));

                try {
                    //Execute Services
                    switch(tokens.get(0)){
                        case "CREATE_USER":
                        createUserCommand.invoke(tokens);
                        break;
                        case "CREATE_EVENT":
                        createEventCommand.invoke(tokens);
                        break;
                        case "DELETE_EVENT":
                        deleteEventCommand.invoke(tokens);
                        break;
                        case "ADD_QUESTION":
                        addQuestionCommand.invoke(tokens);
                        break;
                        case "DELETE_QUESTION":
                        deleteQuestionCommand.invoke(tokens);
                        break;
                        case "UPVOTE_QUESTION":
                        upVoteQuestionCommand.invoke(tokens);
                        break;
                        case "REPLY_QUESTION":
                        replyQuestionCommand.invoke(tokens);
                        break;
                        case "LIST_QUESTIONS":
                        listQuestionCommand.invoke(tokens);
                        break;
                        default:
                            throw new RuntimeException("INVALID_COMMAND");
                }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e.getMessage());
                }
        }
    }
}
